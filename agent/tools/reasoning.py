"""
Reasoning utilities for GrokAgent.

This module provides helper functions for configuring and extracting the internal reasoning trace
generated by Grok reasoning-capable models (grok-3-mini or grok-3-mini-fast).
Reasoning models can think step-by-step before producing a final answer;
their chain-of-thought is returned in the `reasoning_content` field of the response.

Usage:
  - Include `reasoning_effort` returned by `get_reasoning_effort()` when calling the API.
  - After receiving a response, call `extract_reasoning(response)` to obtain the reasoning trace.
"""
import os

def get_reasoning_effort():
    """
    Return the reasoning_effort parameter for the xAI API: 'low' or 'high'.

    Models that support reasoning will spend additional tokens generating a chain-of-thought
    before the final answer. `reasoning_effort` controls how much effort to use.
    - 'low': minimal reasoning, fewer tokens, faster response.
    - 'high': maximum reasoning, more tokens, slower response.
    Default is 'high'.

    This value should be passed into the API call, e.g.:
      client.chat.completions.create(..., reasoning_effort=get_reasoning_effort())
    """
    return os.getenv("XAI_REASONING_EFFORT", "high")

def extract_reasoning(response):
    """
    Extract the chain-of-thought reasoning trace from a xAI ChatCompletion response.

    Returns:
      - A string containing the internal reasoning (step-by-step thought process),
      - or None if the model did not include a reasoning trace.

    The reasoning content is available only when using a reasoning-capable model
    and passing a valid `reasoning_effort`.
    """
    try:
        return response.choices[0].message.reasoning_content
    except AttributeError:
        return None 